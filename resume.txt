John Peng
johnpeng47@gmail.com | (647) 206-3110 | Toronto, Canada

A NICE, RENDERED VERSION OF THIS RESUME IS UP ON: https://cowboy.rocks/resume

Professional Experience
Penetration Tester, Kroll (Formerly Security Compass)
July 2018 - Jan 2023

Led and participated in pentests against a variety of standard targets including web-app, cloud, mobile and network
Executed bespoke engagement types, including binary fuzzing against the heap allocator of a graphics occlusion library and red team engagements
Inculcated a mindset of true paranoia when it comes to designing secure web applications

A NICE, RENDERED VERSION OF THIS RESUME IS UP ON: https://cowboy.rocks/resume

Projects
(What Ive been up to since I quit my job)

Cowboy (Automated Unit Test Generator)
Server Code, Client Code

Basically implemented this for Python, and extensible to other lanuages with TreeSitter support
Uses special home-brewed, coverage diffing algorithm to build test/src file mapping
Then do rounds of unit test "augmentation" (extending existing unit tests instead of generating new tests wholesale) using the src file mapping as additional context to the LLM to guide generation
Empirically tested that adding src context improves coverage of augmented tests by significant margin
Allows for automated, large-scale unit test augmentation, with human interaction only for approving test cases

A NICE, RENDERED VERSION OF THIS RESUME IS UP ON: https://cowboy.rocks/resume

Topic Explorer source code available upon request
https://cowboy.rocks/TopicExplorer

Recursively expand into deeper subtopic levels using a single prompt representing a hierarchal tree of topics
First part of an experimental, AI-first document writing flow
TBR: Generating paragraphs/sections from the list of topics piecemeal
TBR: Taking the generated paragraphs from above and composing them into a full-fledged document

A NICE, RENDERED VERSION OF THIS RESUME IS UP ON: https://cowboy.rocks/resume

CodeSearch source code available upon request
https://cowboy.rocks/codesearch
Generates summaries for code clusters created from graph-based clustering algo on a dependency graph over RAG-style code chunking
TBR: Naive semantic search over chunked code embeddings
TBR: Incorporating summary chunk into semantic code search

Familiar Technologies
Front-end: React (Typescript), Tailwind
Backend: Python, FastAPI, Postgres, MongoDB
AI code stack: V0 + Claude + Cursor
ML: 3/4 finished Karpathy YT lectures, 0/4 finished the assignments


Education
Software Engineering, McMaster University
2018